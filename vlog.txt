==1803== Memcheck, a memory error detector
==1803== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1803== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1803== Command: ./httpd
==1803== Parent PID: 1789
==1803== 
==1803== Thread 2:
==1803== Invalid read of size 1
==1803==    at 0x4C30F62: strlen (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1803==    by 0x57CA47D: strdup (strdup.c:41)
==1803==    by 0x4043E0: decode_url_request (http_server.c:756)
==1803==    by 0x4035AE: decode_request (http_server.c:491)
==1803==    by 0x4023A1: accept_request (http_server.c:57)
==1803==    by 0x55296B9: start_thread (pthread_create.c:333)
==1803==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1803== 
==1803== 
==1803== Process terminating with default action of signal 11 (SIGSEGV)
==1803==  Access not within mapped region at address 0x0
==1803==    at 0x4C30F62: strlen (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1803==    by 0x57CA47D: strdup (strdup.c:41)
==1803==    by 0x4043E0: decode_url_request (http_server.c:756)
==1803==    by 0x4035AE: decode_request (http_server.c:491)
==1803==    by 0x4023A1: accept_request (http_server.c:57)
==1803==    by 0x55296B9: start_thread (pthread_create.c:333)
==1803==  If you believe this happened as a result of a stack
==1803==  overflow in your program's main thread (unlikely but
==1803==  possible), you can try to increase the size of the
==1803==  main thread stack using the --main-stacksize= flag.
==1803==  The main thread stack size used in this run was 8388608.
==1803== 
==1803== HEAP SUMMARY:
==1803==     in use at exit: 34,956 bytes in 87 blocks
==1803==   total heap usage: 584 allocs, 497 frees, 148,423 bytes allocated
==1803== 
==1803== LEAK SUMMARY:
==1803==    definitely lost: 367 bytes in 21 blocks
==1803==    indirectly lost: 17,618 bytes in 48 blocks
==1803==      possibly lost: 345 bytes in 2 blocks
==1803==    still reachable: 16,626 bytes in 16 blocks
==1803==         suppressed: 0 bytes in 0 blocks
==1803== Rerun with --leak-check=full to see details of leaked memory
==1803== 
==1803== For counts of detected and suppressed errors, rerun with: -v
==1803== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
