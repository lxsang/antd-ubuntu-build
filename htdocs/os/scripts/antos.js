// Generated by CoffeeScript 1.9.3
(function() {
  var AboutDialog, ApplicationHandler, BaseApplication, BaseDialog, BaseEvent, BaseModel, BaseService, BasicDialog, BasicFileHandler, CalendarDialog, ColorPickerDialog, DB, FileDiaLog, GoogleDriveHandler, InfoDialog, PromptDialog, RemoteFileHandler, SelectionDialog, SubWindow, YesNoDialog, _API, _GUI, _OS, _PM, _REST, _courrier, self,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  self = this;

  self.OS || (self.OS = {
    API: {},
    GUI: {},
    APP: {},
    setting: {
      user: {},
      applications: {},
      desktop: {},
      appearance: {},
      VFS: {},
      system: {}
    },
    courrier: {
      observable: riot.observable(),
      quota: 0,
      listeners: new Object,
      on: function(e, f, a) {
        if (!_courrier.listeners[a.pid]) {
          _courrier.listeners[a.pid] = [];
        }
        _courrier.listeners[a.pid].push({
          e: e,
          f: f
        });
        return _courrier.observable.on(e, f);
      },
      trigger: function(e, d) {
        return _courrier.observable.trigger(e, d);
      },
      osfail: function(m, e, s) {
        return _courrier.ostrigger("fail", {
          m: m,
          e: e,
          s: s
        });
      },
      oserror: function(m, e, s) {
        return _courrier.ostrigger("error", {
          m: m,
          e: e,
          s: s
        });
      },
      osinfo: function(m) {
        return _courrier.ostrigger("info", {
          m: m,
          e: null,
          s: null
        });
      },
      ostrigger: function(e, d) {
        return _courrier.trigger(e, {
          id: 0,
          data: d,
          name: "OS"
        });
      },
      unregister: function(app) {
        var i, j, len, ref;
        if (!(_courrier.listeners[app.pid] && _courrier.listeners[app.pid].length > 0)) {
          return;
        }
        ref = _courrier.listeners[app.pid];
        for (j = 0, len = ref.length; j < len; j++) {
          i = ref[j];
          _courrier.observable.off(i.e, i.f);
        }
        delete _courrier.listeners[app.pid];
        return _courrier.listeners[app.pid] = [];
      },
      getMID: function() {
        _courrier.quota += 1;
        return _courrier.quota;
      }
    },
    register: function(name, x) {
      if (x.type === 3) {
        return self.OS.GUI.subwindows[name] = x;
      } else {
        return _OS.APP[name] = x;
      }
    },
    PM: {
      pidalloc: 0,
      processes: {},
      createProcess: function(app, cls, args) {
        var obj;
        if (cls.singleton && _PM.processes[app] && _PM.processes[app].length === 1) {
          _PM.processes[app][0].show();
        } else {
          if (!_PM.processes[app]) {
            _PM.processes[app] = [];
          }
          obj = new cls(args);
          obj.birth = (new Date).getTime();
          _PM.pidalloc++;
          obj.pid = _PM.pidalloc;
          _PM.processes[app].push(obj);
          if (cls.type === 1) {
            _GUI.dock(obj, cls.meta);
          } else {
            _GUI.attachservice(obj);
          }
        }
        if (cls.type === 2) {
          return _courrier.trigger("srvroutineready", app);
        }
      },
      appByPid: function(pid) {
        var app, find, k, ref, v;
        app = void 0;
        find = function(l) {
          var a, j, len;
          for (j = 0, len = l.length; j < len; j++) {
            a = l[j];
            if (a.pid === pid) {
              return a;
            }
          }
        };
        ref = _PM.processes;
        for (k in ref) {
          v = ref[k];
          app = find(v);
          if (app) {
            break;
          }
        }
        return app;
      },
      kill: function(app) {
        var i;
        if (!app.name || !_PM.processes[app.name]) {
          return;
        }
        i = _PM.processes[app.name].indexOf(app);
        if (i >= 0) {
          if (_OS.APP[app.name].type === 1) {
            _GUI.undock(app);
          } else {
            _GUI.detachservice(app);
          }
          _courrier.unregister(app);
          delete _PM.processes[app.name][i];
          return _PM.processes[app.name].splice(i, 1);
        }
      },
      killAll: function(app) {
        var a, j, len, len1, ref, results, tmp, u;
        if (!_PM.processes[app]) {
          return;
        }
        tmp = [];
        ref = _PM.processes[app];
        for (j = 0, len = ref.length; j < len; j++) {
          a = ref[j];
          tmp.push(a);
        }
        results = [];
        for (u = 0, len1 = tmp.length; u < len1; u++) {
          a = tmp[u];
          results.push(a.quit());
        }
        return results;
      }
    },
    cleanup: function() {
      ($("#wrapper")).empty();
      _GUI.clearTheme();
      _courrier.observable = riot.observable();
      _courrier.quota = 0;
      _OS.APP = {};
      _OS.setting = {
        user: {},
        applications: {},
        desktop: {},
        appearance: {},
        VFS: {},
        system: {}
      };
      _PM.processes = {};
      return _PM.pidalloc = 0;
    },
    boot: function() {
      return _API.handler.auth(function(d) {
        if (d.error) {
          return _GUI.login();
        } else {
          return _GUI.startAntOS(d.result);
        }
      });
    }
  });

  self.OS.API = {
    handler: {},
    post: function(p, d, c, f) {
      var q;
      q = _courrier.getMID();
      _API.loading(q, p);
      return $.ajax({
        type: 'POST',
        url: p,
        contentType: 'application/json',
        data: JSON.stringify(d, {
          dataType: 'json',
          success: null
        })
      }).done(function(data) {
        _API.loaded(q, p, "OK");
        return c(data);
      }).fail(function(e, s) {
        _API.loaded(q, p, "FAIL");
        return f(e, s);
      });
    },
    blob: function(p, c, f) {
      var q, r;
      q = _courrier.getMID();
      r = new XMLHttpRequest();
      r.open("GET", p, true);
      r.responseType = "arraybuffer";
      r.onload = function(e) {
        if (this.status === 200 && this.readyState === 4) {
          c(this.response);
          return _API.loaded(q, p, "OK");
        } else {
          f(e, this);
          return _API.loaded(q, p, "FAIL");
        }
      };
      _API.loading(q, p);
      return r.send();
    },
    upload: function(p, d, c, f) {
      var o, q;
      q = _courrier.getMID();
      o = ($('<input>')).attr('type', 'file').css("display", "none");
      o.change(function() {
        var formd;
        _API.loading(q, p);
        formd = new FormData();
        formd.append('path', d);
        formd.append('upload', o[0].files[0]);
        return $.ajax({
          url: p,
          data: formd,
          type: 'POST',
          contentType: false,
          processData: false
        }).done(function(data) {
          _API.loaded(q, p, "OK");
          return c(data);
        }).fail(function(e, s) {
          _API.loaded(q, p, "FAIL");
          return f(e, s);
        });
      });
      return o.click();
    },
    saveblob: function(name, b) {
      var o, url;
      url = window.URL.createObjectURL(b);
      o = ($('<a>')).attr("href", url).attr("download", name).css("display", "none").appendTo("body");
      o[0].click();
      window.URL.revokeObjectURL(url);
      return o.remove();
    },
    systemConfig: function() {
      return _API.request('config', function(result) {
        return console.log(result);
      });
    },
    loading: function(q, p) {
      return _courrier.trigger("loading", {
        id: q,
        data: {
          m: "" + p,
          s: true
        },
        name: "OS"
      });
    },
    loaded: function(q, p, m) {
      return _courrier.trigger("loaded", {
        id: q,
        data: {
          m: m + ": " + p,
          s: false
        },
        name: "OS"
      });
    },
    get: function(p, c, f, t) {
      var conf, q;
      conf = {
        type: 'GET',
        url: p
      };
      if (t) {
        conf.dataType = t;
      }
      q = _courrier.getMID();
      _API.loading(q, p);
      return $.ajax(conf).done(function(data) {
        _API.loaded(q, p, "OK");
        return c(data);
      }).fail(function(e, s) {
        _API.loaded(q, p, "FAIL");
        return f(e, s);
      });
    },
    script: function(p, c, f) {
      var q;
      q = _courrier.getMID();
      _API.loading(q, p);
      return $.getScript(p).done(function(data) {
        _API.loaded(q, p, "OK");
        return c(data);
      }).fail(function(e, s) {
        _API.loaded(q, p, "FAIL");
        return f(e, s);
      });
    },
    resource: function(r, c, f) {
      var path;
      path = "resources/" + r;
      return _API.get(path, c, f);
    },
    packages: {
      fetch: function(f) {
        return _API.handler.packages({
          command: "list",
          args: {
            paths: _OS.setting.system.pkgpaths
          }
        }, f);
      },
      cache: function(f) {
        return _API.handler.packages({
          command: "cache",
          args: {
            paths: _OS.setting.system.pkgpaths
          }
        }, f);
      }
    },
    throwe: function(n) {
      var e, err;
      err = void 0;
      try {
        throw new Error(n);
      } catch (_error) {
        e = _error;
        err = e;
      }
      if (!err) {
        return "";
      }
      return err;
    }
  };

  self.OS.API.HOST = self.location.hostname + (self.location.port ? ":" + self.location.port : "");

  self.OS.API.REST = "http://" + self.OS.API.HOST + "/lua-api";

  _REST = self.OS.API.REST;

  self.OS.API.handler = {
    get: _REST + "/fs/get/",
    scandir: function(p, c) {
      var path;
      path = _REST + "/fs/scandir";
      return _API.post(path, {
        path: p
      }, c, function(e, s) {
        return _courrier.osfail("Fail to scan directory: " + p, e, s);
      });
    },
    mkdir: function(p, c) {
      var path;
      path = _REST + "/fs/mkdir";
      return _API.post(path, {
        path: p
      }, c, function(e, s) {
        return _courrier.osfail("Fail to create directory: " + p, e, s);
      });
    },
    fileinfo: function(p, c) {
      var path;
      path = _REST + "/fs/fileinfo";
      return _API.post(path, {
        path: p
      }, c, function(e, s) {
        return _courrier.osfail("Fail to get file metadata: " + p, e, s);
      });
    },
    readfile: function(p, c, t) {
      var path;
      path = _REST + "/fs/get/";
      return _API.get(path + p, c, function(e, s) {
        return _courrier.osfail("Fail to read file: " + p, e, s);
      }, t);
    },
    move: function(s, d, c) {
      var path;
      path = _REST + "/fs/move";
      return _API.post(path, {
        src: s,
        dest: d
      }, c, function(e, s) {
        return _courrier.osfail("Fail to move file: " + s + " -> " + d, e, s);
      });
    },
    "delete": function(p, c) {
      var path;
      path = _REST + "/fs/delete";
      return _API.post(path, {
        path: p
      }, c, function(e, s) {
        return _courrier.osfail("Fail to delete: " + p, e, s);
      });
    },
    fileblob: function(p, c) {
      var path;
      path = _REST + "/fs/get/";
      return _API.blob(path + p, c, function(e, s) {
        return _courrier.osfail("Fail to read file: " + p, e, s);
      });
    },
    packages: function(d, c) {
      var path;
      path = _REST + "/system/packages";
      return _API.post(path, d, c, function(e, s) {
        return _courrier.osfail("Fail to " + d.command + " package", e, s);
      });
    },
    upload: function(d, c) {
      var path;
      path = _REST + "/fs/upload";
      return _API.upload(path, d, c, function(e, s) {
        return _courrier.osfail("Fail to upload file to: " + d, e, s);
      });
    },
    write: function(p, d, c) {
      var path;
      path = _REST + "/fs/write";
      return _API.post(path, {
        path: p,
        data: d
      }, c, function(e, s) {
        return _courrier.osfail("Fail to write to file: " + p, e, s);
      });
    },
    scanapp: function(p, c) {
      var path;
      return path = _REST + "/system/application";
    },
    auth: function(c) {
      var p;
      p = _REST + "/system/auth";
      return _API.post(p, {}, c, function() {
        return alert("Resource not found: " + p);
      });
    },
    login: function(d, c) {
      var p;
      p = _REST + "/system/login";
      return _API.post(p, d, c, function() {
        return alert("Resource not found: " + p);
      });
    },
    logout: function() {
      var p;
      p = _REST + "/system/logout";
      return _API.post(p, {}, function(d) {
        return _OS.boot();
      }, function() {
        return alert("Resource not found " + p);
      });
    },
    setting: function() {
      var p;
      p = _REST + "/system/settings";
      return _API.post(p, _OS.setting, function(d) {
        if (d.error) {
          return _courrier.oserror("Cannot save system setting", d.error);
        }
      }, function(e, s) {
        return _courrier.osfail("Fail to make request: " + p, e, s);
      });
    },
    dbquery: function(cmd, d, c) {
      var path;
      path = _REST + "/db/" + cmd;
      return _API.post(path, d, c, function(e, s) {
        return _courrier.osfail("Fail to query data from database: " + p, e, s);
      });
    }
  };

  String.prototype.hash = function() {
    var hash, i;
    hash = 5381;
    i = this.length;
    while (i) {
      hash = (hash * 33) ^ this.charCodeAt(--i);
    }
    return hash >>> 0;
  };

  String.prototype.asBase64 = function() {
    var tmp;
    tmp = encodeURIComponent(this);
    return btoa(tmp.replace(/%([0-9A-F]{2})/g, function(match, p1) {
      return String.fromCharCode(parseInt(p1, 16));
    }));
  };

  String.prototype.asFileHandler = function() {
    var list;
    list = this.split(":///");
    switch (list[0]) {
      case "app":
        return new ApplicationHandler(this);
      default:
        return new RemoteFileHandler(this);
    }
  };

  this.OS.API.VFS = {};

  BasicFileHandler = (function() {
    function BasicFileHandler(path) {
      this.dirty = false;
      this.cache = void 0;
      this.setPath(path);
    }

    BasicFileHandler.prototype.setPath = function(p) {
      var list, re;
      this.ready = false;
      if (!p) {
        return;
      }
      this.path = p.toString();
      list = this.path.split(":///");
      this.protocol = list[0];
      if (!(list.length > 1)) {
        return;
      }
      re = list[1].replace(/^\/+|\/+$/g, '');
      if (re === "") {
        return;
      }
      this.genealogy = re.split("/");
      if (!this.isRoot()) {
        this.basename = this.genealogy[this.genealogy.length - 1];
      }
      if (!(this.basename.lastIndexOf(".") === 0 || this.basename.indexOf(".") === -1)) {
        return this.ext = this.basename.split(".").pop();
      }
    };

    BasicFileHandler.prototype.isRoot = function() {
      return (!this.genealogy) || (this.genealogy.size === 0);
    };

    BasicFileHandler.prototype.isHidden = function() {
      if (!this.basename) {
        return false;
      }
      return this.basename[0] === ".";
    };

    BasicFileHandler.prototype.hash = function() {
      if (!this.path) {
        return -1;
      }
      return this.path.hash();
    };

    BasicFileHandler.prototype.getb64 = function(m) {
      var b64;
      if (!this.cache) {
        return "";
      }
      b64 = this.cache.asBase64();
      return "data:" + m + ";base64," + b64;
    };

    BasicFileHandler.prototype.parent = function() {
      if (this.isRoot()) {
        return this;
      }
      return this.protocol + ":///" + (this.genealogy.slice(0, this.genealogy.length - 1)).join("/");
    };

    BasicFileHandler.prototype.onready = function(f, err) {
      var me;
      if (this.ready) {
        return f();
      }
      me = this;
      return me.meta(function(d) {
        if (d.error) {
          if (err) {
            return err(d);
          } else {
            return _courrier.osfail(d.error, _API.throwe("OS.VFS"), d.error);
          }
        }
        me.info = d.result;
        me.ready = true;
        return f();
      });
    };

    BasicFileHandler.prototype.read = function(f, t) {
      var me;
      me = this;
      return this.onready((function() {
        return me.action("read", t, f);
      }));
    };

    BasicFileHandler.prototype.write = function(d, f) {
      var me;
      me = this;
      return this.action("write", d, function(r) {
        if (r.result) {
          _courrier.ostrigger("VFS", {
            m: "write",
            file: me
          });
        }
        return f(r);
      });
    };

    BasicFileHandler.prototype.mk = function(d, f) {
      var me;
      me = this;
      return this.onready((function() {
        return me.action("mk", d, function(r) {
          if (r.result) {
            _courrier.ostrigger("VFS", {
              m: "mk",
              file: me
            });
          }
          return f(r);
        });
      }));
    };

    BasicFileHandler.prototype.remove = function(f) {
      var me;
      me = this;
      return this.onready((function() {
        return me.action("remove", null, function(r) {
          if (r.result) {
            _courrier.ostrigger("VFS", {
              m: "remove",
              file: me
            });
          }
          return f(r);
        });
      }));
    };

    BasicFileHandler.prototype.upload = function(f) {
      var me;
      me = this;
      return this.onready((function() {
        return me.action("upload", null, function(r) {
          if (r.result) {
            _courrier.ostrigger("VFS", {
              m: "upload",
              file: me
            });
          }
          return f(r);
        });
      }));
    };

    BasicFileHandler.prototype.download = function(f) {
      var me;
      me = this;
      return this.onready((function() {
        return me.action("download", null, f);
      }));
    };

    BasicFileHandler.prototype.move = function(d, f) {
      var me;
      me = this;
      return this.onready((function() {
        return me.action("move", d, function(r) {
          if (r.result) {
            _courrier.ostrigger("VFS", {
              m: "move",
              file: d.asFileHandler()
            });
          }
          return f(r);
        });
      }));
    };

    BasicFileHandler.prototype.execute = function(f) {
      var me;
      me = this;
      return this.onready((function() {
        return me.action("execute", null, f);
      }));
    };

    BasicFileHandler.prototype.meta = function(f) {};

    BasicFileHandler.prototype.action = function(n, p, f) {
      return _courrier.osfail("VFS unknown action: " + n, _API.throwe("OS.VFS"), n);
    };

    return BasicFileHandler;

  })();

  self.OS.API.VFS.BasicFileHandler = BasicFileHandler;

  RemoteFileHandler = (function(superClass) {
    extend(RemoteFileHandler, superClass);

    function RemoteFileHandler(path) {
      RemoteFileHandler.__super__.constructor.call(this, path);
    }

    RemoteFileHandler.prototype.meta = function(f) {
      return _API.handler.fileinfo(this.path, f);
    };

    RemoteFileHandler.prototype.action = function(n, p, f) {
      var me;
      me = this;
      switch (n) {
        case "read":
          if (this.info.type === "dir") {
            return _API.handler.scandir(this.path, f);
          }
          return _API.handler.readfile(this.path, f, p ? p : "text");
        case "mk":
          if (this.info.type === "file") {
            return f({
              error: this.path + " is not a directory"
            });
          }
          return _API.handler.mkdir(this.path + "/" + p, f);
        case "write":
          return _API.handler.write(this.path, p, f);
        case "upload":
          if (this.info.type === "file") {
            return;
          }
          return _API.handler.upload(this.path, f);
        case "remove":
          return _API.handler["delete"](this.path, f);
        case "download":
          if (this.info.type === "dir") {
            return;
          }
          return _API.handler.fileblob(this.path, function(d) {
            var blob;
            blob = new Blob([d], {
              type: "octet/stream"
            });
            return _API.saveblob(me.basename, blob);
          });
        case "move":
          return _API.handler.move(this.path, p, f);
        default:
          return _courrier.osfail("VFS unknown action: " + n, _API.throwe("OS.VFS"), n);
      }
    };

    return RemoteFileHandler;

  })(self.OS.API.VFS.BasicFileHandler);

  self.OS.API.VFS.RemoteFileHandler = RemoteFileHandler;

  ApplicationHandler = (function(superClass) {
    extend(ApplicationHandler, superClass);

    function ApplicationHandler(path) {
      ApplicationHandler.__super__.constructor.call(this, path);
      if (this.basename) {
        this.info = _OS.setting.system.packages[this.basename];
      }
      this.ready = true;
    }

    ApplicationHandler.prototype.meta = function(f) {
      return f();
    };

    ApplicationHandler.prototype.action = function(n, p, f) {
      var k, me, v;
      me = this;
      switch (n) {
        case "read":
          if (this.info) {
            return f({
              result: this.info
            });
          }
          if (!this.isRoot()) {
            return;
          }
          return f({
            result: (function() {
              var ref, results;
              ref = _OS.setting.system.packages;
              results = [];
              for (k in ref) {
                v = ref[k];
                results.push(v);
              }
              return results;
            })()
          });
        case "mk":
          break;
        case "write":
          break;
        case "upload":
          break;
        case "remove":
          break;
        case "download":
          break;
        case "move":
          break;
        default:
          return _courrier.osfail("VFS unknown action: " + n, _API.throwe("OS.VFS"), n);
      }
    };

    return ApplicationHandler;

  })(self.OS.API.VFS.BasicFileHandler);

  self.OS.API.VFS.ApplicationHandler = ApplicationHandler;

  GoogleDriveHandler = (function(superClass) {
    extend(GoogleDriveHandler, superClass);

    function GoogleDriveHandler(path) {
      GoogleDriveHandler.__super__.constructor.call(this, path);
    }

    return GoogleDriveHandler;

  })(self.OS.API.VFS.BasicFileHandler);

  self.OS.API.VFS.GoogleDriveHandler = GoogleDriveHandler;

  DB = (function() {
    function DB(table) {
      this.table = table;
    }

    DB.prototype.save = function(d, f) {
      return _API.handler.dbquery("save", {
        table: this.table,
        data: d
      }, f);
    };

    DB.prototype["delete"] = function(id, f) {
      return _API.handler.dbquery("delete", {
        table: this.table,
        id: id
      }, f);
    };

    DB.prototype.get = function(id, f) {
      return _API.handler.dbquery("get", {
        table: this.table,
        id: id
      }, f);
    };

    DB.prototype.find = function(cond, f) {
      return _API.handler.dbquery("select", {
        table: this.table,
        cond: cond
      }, f);
    };

    return DB;

  })();

  self.OS.API.DB = DB;

  self.OS.GUI = {
    subwindows: new Object(),
    dialog: void 0,
    htmlToScheme: function(html, app, parent) {
      var scheme;
      scheme = $.parseHTML(html);
      ($(parent)).append(scheme);
      riot.mount($(scheme), {
        observable: app.observable
      });
      app.scheme = scheme[0];
      app.main();
      return app.show();
    },
    loadScheme: function(path, app, parent) {
      return path.asFileHandler().read(function(x) {
        if (!x) {
          return null;
        }
        return _GUI.htmlToScheme(x, app, parent);
      });
    },
    clearTheme: function() {
      return $("head link#ostheme").attr("href", "");
    },
    loadTheme: function(name, force) {
      var path;
      if (force) {
        _GUI.clearTheme();
      }
      path = "resources/themes/" + name + "/" + name + ".css";
      return $("head link#ostheme").attr("href", path);
    },
    pushServices: function(srvs) {
      var f, i, j, len, results;
      f = function(v) {
        return _courrier.observable.one("srvroutineready", function() {
          return _GUI.pushService(v);
        });
      };
      _GUI.pushService(srvs[0]);
      srvs.splice(0, 1);
      results = [];
      for (j = 0, len = srvs.length; j < len; j++) {
        i = srvs[j];
        results.push(f(i));
      }
      return results;
    },
    openDialog: function(d, f, title, data) {
      var ex;
      if (_GUI.dialog) {
        _GUI.dialog.show();
        return;
      }
      if (!_GUI.subwindows[d]) {
        ex = _API.throwe("Dialog");
        return _courrier.oserror("Dialog " + d + " not found", ex, null);
      }
      _GUI.dialog = new _GUI.subwindows[d]();
      _GUI.dialog.parent = _GUI;
      _GUI.dialog.handler = f;
      _GUI.dialog.pid = -1;
      _GUI.dialog.data = data;
      _GUI.dialog.title = title;
      return _GUI.dialog.init();
    },
    pushService: function(ph) {
      var app, arr, srv;
      arr = ph.split("/");
      srv = arr[1];
      app = arr[0];
      if (_OS.APP[srv]) {
        return _PM.createProcess(srv, _OS.APP[srv]);
      }
      return _GUI.loadApp(app, function(a) {
        if (_OS.APP[srv]) {
          return _PM.createProcess(srv, _OS.APP[srv]);
        }
      }, function(e, s) {
        _courrier.trigger("srvroutineready", srv);
        return _courrier.osfail("Cannot read service script: " + srv + " ", e, s);
      });
    },
    appsByMime: function(mime) {
      var apps, f, i, j, k, len, m, metas, mimes, v;
      metas = (function() {
        var ref, results;
        ref = _OS.setting.system.packages;
        results = [];
        for (k in ref) {
          v = ref[k];
          if (v.app) {
            results.push(v);
          }
        }
        return results;
      })();
      mimes = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = metas.length; j < len; j++) {
          m = metas[j];
          if (m) {
            results.push(m.mimes);
          }
        }
        return results;
      })();
      apps = [];
      f = function(arr, idx) {
        var e;
        try {
          return arr.filter(function(m, i) {
            if (mime.match(new RegExp(m, "g"))) {
              apps.push(metas[idx]);
              return false;
            }
            return false;
          });
        } catch (_error) {
          e = _error;
          return _courrier.osfail("Find app by mimes " + mime, e, mime);
        }
      };
      for (i = j = 0, len = mimes.length; j < len; i = ++j) {
        m = mimes[i];
        if (m) {
          f(m, i);
        }
      }
      return apps;
    },
    appsWithServices: function() {
      var k, o, ref, v;
      o = {};
      ref = _OS.setting.system.packages;
      for (k in ref) {
        v = ref[k];
        if (v.services && v.services.length > 0) {
          o[k] = v;
        }
      }
      return o;
    },
    openWith: function(it) {
      var apps, e, list;
      if (!it) {
        return;
      }
      if (it.type === "app" && it.app) {
        return _GUI.launch(it.app);
      }
      if (it.type === "app") {
        return _courrier.osinfo("Application" + it.text + " is not executable");
      }
      apps = _GUI.appsByMime((it.type === "dir" ? "dir" : it.mime));
      if (apps.length === 0) {
        return _courrier.osinfo("No application available to open " + it.filename);
      }
      if (apps.length === 1) {
        return _GUI.launch(apps[0].app, [it.path]);
      }
      list = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = apps.length; j < len; j++) {
          e = apps[j];
          results.push({
            text: e.app,
            icon: e.icon,
            iconclass: e.iconclass
          });
        }
        return results;
      })();
      return _GUI.openDialog("SelectionDialog", function(d) {
        return _GUI.launch(d.text, [it.path]);
      }, "Open width", list);
    },
    forceLaunch: function(app, args) {
      console.log("This method is used for developing only, please use the launch method instead");
      _PM.killAll(app);
      _OS.APP[app] = void 0;
      return _GUI.launch(app, args);
    },
    loadApp: function(app, ok, err) {
      var js, path;
      path = "os:///packages/" + app;
      if (_OS.setting.system.packages[app].path) {
        path = _OS.setting.system.packages[app].path;
      }
      js = path + "/main.js";
      return js.asFileHandler().read(function(d) {
        var css;
        css = path + "/main.css";
        css.asFileHandler().onready(function(d) {
          return $('<link>', {
            rel: 'stylesheet',
            type: 'text/css',
            'href': _API.handler.get + "/" + css
          }).appendTo('head');
        }, function() {});
        return (path + "/package.json").asFileHandler().read(function(data) {
          var j, len, ref, v;
          data.path = path;
          if (_OS.APP[app]) {
            _OS.APP[app].meta = data;
          }
          if (data.services) {
            ref = data.services;
            for (j = 0, len = ref.length; j < len; j++) {
              v = ref[j];
              _OS.APP[v].meta = data;
            }
          }
          return ok(app);
        }, "json");
      }, "script");
    },
    launch: function(app, args) {
      if (!_OS.APP[app]) {
        return _GUI.loadApp(app, function(a) {
          return _PM.createProcess(a, _OS.APP[a], args);
        }, function(e, s) {});
      } else {
        if (_OS.APP[app]) {
          return _PM.createProcess(app, _OS.APP[app], args);
        }
      }
    },
    dock: function(app, meta) {
      var data, dock;
      data = {
        icon: null,
        iconclass: meta.iconclass || "",
        app: app,
        onbtclick: function() {
          return app.toggle();
        }
      };
      if (meta.icon) {
        data.icon = _API.handler.get + "/" + meta.path + "/" + meta.icon;
      }
      if ((!meta.icon) && (!meta.iconclass)) {
        data.iconclass = "fa fa-cogs";
      }
      dock = $("#sysdock");
      app.one("rendered", function() {
        dock.get(0).newapp(data);
        app.sysdock = dock.get(0);
        return app.appmenu = ($("[data-id = 'appmenu']", "#syspanel"))[0];
      });
      return app.init();
    },
    undock: function(app) {
      return ($("#sysdock")).get(0).removeapp(app);
    },
    attachservice: function(srv) {
      ($("#syspanel"))[0].attachservice(srv);
      return srv.init();
    },
    detachservice: function(srv) {
      return ($("#syspanel"))[0].detachservice(srv);
    },
    bindContextMenu: function(event) {
      var handler;
      handler = function(e) {
        var p;
        if (e.contextmenuHandler) {
          return e.contextmenuHandler(event, ($("#contextmenu"))[0]);
        } else {
          p = $(e).parent().get(0);
          if (p !== ($("#workspace")).get(0)) {
            return handler(p);
          }
        }
      };
      handler(event.target);
      return event.preventDefault();
    },
    initDM: function() {
      return _API.resource("schemes/dm.html", function(x) {
        var desktop, fp, scheme;
        if (!x) {
          return null;
        }
        scheme = $.parseHTML(x);
        ($("#wrapper")).append(scheme);
        riot.mount($("#syspanel", $("#wrapper")));
        riot.mount($("#sysdock", $("#wrapper")), {
          items: []
        });
        riot.mount($("#contextmenu"));
        ($("#workspace")).contextmenu(function(e) {
          return _GUI.bindContextMenu(e);
        });
        desktop = $("#desktop");
        fp = _OS.setting.desktop.path.asFileHandler();
        desktop[0].fetch = function() {
          var fn;
          fn = function() {
            return fp.read(function(d) {
              var items;
              if (d.error) {
                return _courrier.osfail(d.error, _API.throwe("OS.VFS"), d.error);
              }
              items = [];
              $.each(d.result, function(i, v) {
                if (v.filename[0] === '.' && !_OS.setting.desktop.showhidden) {
                  return;
                }
                v.text = v.filename;
                v.iconclass = v.type;
                return items.push(v);
              });
              desktop[0].set("items", items);
              return desktop[0].refresh();
            });
          };
          return fp.onready(function() {
            return fn();
          }, function(e) {
            var name;
            console.log(fp.path + " not found");
            name = fp.basename;
            return fp.parent().asFileHandler().mk(name, function(r) {
              var ex;
              ex = _API.throwe("OS.VFS");
              if (r.error) {
                return _courrier.osfail(d.error, ex, d.error);
              } else {
                return fn();
              }
            });
          });
        };
        desktop[0].ready = function(e) {
          e.observable = _courrier;
          window.onresize = function() {
            _courrier.trigger("desktopresize");
            return e.refresh();
          };
          desktop[0].set("onlistselect", function(d) {
            return ($("#sysdock")).get(0).set("selectedApp", null);
          });
          desktop[0].set("onlistdbclick", function(d) {
            var it;
            ($("#sysdock")).get(0).set("selectedApp", null);
            it = desktop[0].get("selected");
            return _GUI.openWith(it);
          });
          desktop.on("click", function(e) {
            if (e.target !== desktop[0]) {
              return;
            }
            desktop[0].set("selected", -1);
            ($("#sysdock")).get(0).set("selectedApp", null);
            return console.log("desktop clicked");
          });
          desktop[0].contextmenuHandler = function(e, m) {
            var k, menu, v;
            if (e.target === desktop[0]) {
              desktop[0].set("selected", -1);
            }
            ($("#sysdock")).get(0).set("selectedApp", null);
            menu = [
              {
                text: "Open",
                dataid: "desktop-open"
              }, {
                text: "Refresh",
                dataid: "desktop-refresh"
              }
            ];
            menu = menu.concat((function() {
              var ref, results;
              ref = _OS.setting.desktop.menu;
              results = [];
              for (k in ref) {
                v = ref[k];
                results.push(v);
              }
              return results;
            })());
            m.set("items", menu);
            m.set("onmenuselect", function(evt) {
              var it;
              switch (evt.item.data.dataid) {
                case "desktop-open":
                  it = desktop[0].get("selected");
                  if (it) {
                    return _GUI.openWith(it);
                  }
                  it = _OS.setting.desktop.path.asFileHandler();
                  it.mime = "dir";
                  return _GUI.openWith(it);
                case "desktop-refresh":
                  return desktop[0].fetch();
                default:
                  if (evt.item.data.app) {
                    return _GUI.launch(evt.item.data.app, evt.item.data.args);
                  }
              }
            });
            return m.show(e);
          };
          desktop[0].fetch();
          _courrier.observable.on("VFS", function(d) {
            if (d.data.file.hash() === fp.hash() || d.data.file.parent().hash() === fp.hash()) {
              return desktop[0].fetch();
            }
          });
          return _courrier.ostrigger("desktoploaded");
        };
        return riot.mount(desktop);
      }, function(e, s) {
        alert("System fall: Cannot init desktop manager");
        return console.log(s, e);
      });
    },
    buildSystemMenu: function() {
      var k, menu, v;
      menu = {
        text: "",
        iconclass: "fa fa-eercast",
        dataid: "sys-menu-root",
        child: [
          {
            text: "Application",
            child: (function() {
              var ref, results;
              ref = _OS.setting.system.packages;
              results = [];
              for (k in ref) {
                v = ref[k];
                if (v.app) {
                  results.push(v);
                }
              }
              return results;
            })(),
            dataid: "sys-apps",
            iconclass: "fa fa-adn",
            onmenuselect: function(d) {
              return _GUI.launch(d.item.data.app);
            }
          }
        ]
      };
      menu.child = menu.child.concat((function() {
        var ref, results;
        ref = _OS.setting.system.menu;
        results = [];
        for (k in ref) {
          v = ref[k];
          results.push(v);
        }
        return results;
      })());
      menu.child.push({
        text: "Log out",
        dataid: "sys-logout",
        iconclass: "fa fa-user-times"
      });
      menu.onmenuselect = function(d) {
        console.log(d);
        if (d.item.data.dataid === "sys-logout") {
          return _API.handler.logout();
        }
        if (!d.item.data.dataid) {
          return _GUI.launch(d.item.data.app);
        }
      };
      return ($("[data-id = 'os_menu']", "#syspanel"))[0].set("items", [menu]);
    },
    login: function() {
      _OS.cleanup();
      return _API.resource("schemes/login.html", function(x) {
        var scheme;
        if (!x) {
          return null;
        }
        scheme = $.parseHTML(x);
        ($("#wrapper")).append(scheme);
        return ($("#btlogin")).click(function() {
          var data;
          data = {
            username: ($("#txtuser")).val(),
            password: ($("#txtpass")).val()
          };
          return _API.handler.login(data, function(d) {
            if (d.error) {
              return ($("#login_error")).html(d.error);
            } else {
              return _GUI.startAntOS(d.result);
            }
          });
        });
      }, function(e, s) {
        return alert("System fall: Cannot init login screen");
      });
    },
    startAntOS: function(conf) {
      _OS.cleanup();
      if (conf.desktop) {
        _OS.setting.desktop = conf.desktop;
      }
      if (conf.applications) {
        _OS.setting.applications = conf.applications;
      }
      if (conf.appearance) {
        _OS.setting.appearance = conf.appearance;
      }
      _OS.setting.user = conf.user;
      if (conf.VFS) {
        _OS.setting.VFS = conf.VFS;
      }
      if (!_OS.setting.desktop.path) {
        _OS.setting.desktop.path = "home:///.desktop";
      }
      if (!_OS.setting.desktop.menu) {
        _OS.setting.desktop.menu = {};
      }
      if (!_OS.setting.VFS.mountpoints) {
        _OS.setting.VFS.mountpoints = [
          {
            text: "Applications",
            path: 'app:///',
            iconclass: "fa  fa-adn",
            type: "app"
          }, {
            text: "Home",
            path: 'home:///',
            iconclass: "fa fa-home",
            type: "fs"
          }, {
            text: "OS",
            path: 'os:///',
            iconclass: "fa fa-inbox",
            type: "fs"
          }, {
            text: "Desktop",
            path: _OS.setting.desktop.path,
            iconclass: "fa fa-desktop",
            type: "fs"
          }
        ];
      }
      if (conf.system) {
        _OS.setting.system = conf.system;
      }
      if (!_OS.setting.system.pkgpaths) {
        _OS.setting.system.pkgpaths = ["home:///.packages", "os:///packages"];
      }
      if (!_OS.setting.system.menu) {
        _OS.setting.system.menu = {};
      }
      if (!_OS.setting.system.repositories) {
        _OS.setting.system.repositories = [];
      }
      if (!_OS.setting.appearance.theme) {
        _OS.setting.appearance.theme = "antos";
      }
      _GUI.loadTheme(_OS.setting.appearance.theme);
      _GUI.initDM();
      _courrier.observable.one("syspanelloaded", function() {
        return _API.packages.cache(function(ret) {
          if (ret.result) {
            return _API.packages.fetch(function(r) {
              var k, ref, v;
              if (r.result) {
                ref = r.result;
                for (k in ref) {
                  v = ref[k];
                  v.text = v.name;
                  v.filename = k;
                  v.type = "app";
                  v.mime = "antos/app";
                  if (!(v.iconclass || v.icon)) {
                    v.iconclass = "fa fa-adn";
                  }
                }
              }
              _OS.setting.system.packages = r.result ? r.result : void 0;
              _GUI.buildSystemMenu();
              return _GUI.pushServices(["CoreServices/PushNotification", "CoreServices/Spotlight", "CoreServices/Calendar"]);
            });
          }
        });
      });
      return _courrier.observable.one("desktoploaded", function() {});
    }
  };

  BaseModel = (function() {
    function BaseModel(name1, args1) {
      var me;
      this.name = name1;
      this.args = args1;
      this.observable = riot.observable();
      this._api = self.OS.API;
      this._gui = self.OS.GUI;
      this.systemsetting = self.OS.setting;
      me = this;
      this.on("exit", function() {
        return me.quit();
      });
      this.host = "#desktop";
      this.dialog = void 0;
    }

    BaseModel.prototype.render = function(p) {
      return _GUI.loadScheme(p, this, this.host);
    };

    BaseModel.prototype.quit = function() {
      var evt;
      evt = new _GUI.BaseEvent("exit");
      this.onexit(evt);
      if (!evt.prevent) {
        delete this.observable;
        if (this.dialog) {
          this.dialog.quit();
        }
        return _PM.kill(this);
      }
    };

    BaseModel.prototype.init = function() {};

    BaseModel.prototype.onexit = function(e) {};

    BaseModel.prototype.one = function(e, f) {
      return this.observable.one(e, f);
    };

    BaseModel.prototype.on = function(e, f) {
      return this.observable.on(e, f);
    };

    BaseModel.prototype.trigger = function(e, d) {
      return this.observable.trigger(e, d);
    };

    BaseModel.prototype.subscribe = function(e, f) {
      return _courrier.on(e, f, this);
    };

    BaseModel.prototype.openDialog = function(d, f, title, data) {
      if (this.dialog) {
        this.dialog.show();
        return;
      }
      if (!_GUI.subwindows[d]) {
        this.error("Dialog " + d + " not found");
        return;
      }
      this.dialog = new _GUI.subwindows[d]();
      this.dialog.parent = this;
      this.dialog.handler = f;
      this.dialog.pid = this.pid;
      this.dialog.data = data;
      this.dialog.title = title;
      return this.dialog.init();
    };

    BaseModel.prototype.publish = function(t, m) {
      var mt;
      mt = this.meta();
      return _courrier.trigger(t, {
        id: this.pid,
        name: this.name,
        data: {
          m: m,
          icon: mt.icon,
          iconclass: mt.iconclass
        }
      });
    };

    BaseModel.prototype.notify = function(m) {
      return this.publish("notification", m);
    };

    BaseModel.prototype.warn = function(m) {
      return this.publish("warning", m);
    };

    BaseModel.prototype.error = function(m) {
      return this.publish("error", m + (this._api.throwe(this.name)));
    };

    BaseModel.prototype.fail = function(m) {
      return this.publish("fail", m);
    };

    BaseModel.prototype.throwe = function() {
      return this._api.throwe(this.name);
    };

    BaseModel.prototype.find = function(id) {
      if (this.scheme) {
        return ($("[data-id='" + id + "']", this.scheme))[0];
      }
    };

    BaseModel.prototype.select = function(sel) {
      if (this.scheme) {
        return $(sel, this.scheme);
      }
    };

    return BaseModel;

  })();

  this.OS.GUI.BaseModel = BaseModel;

  BaseApplication = (function(superClass) {
    extend(BaseApplication, superClass);

    function BaseApplication(name, args) {
      BaseApplication.__super__.constructor.call(this, name, args);
      if (!_OS.setting.applications[this.name]) {
        _OS.setting.applications[this.name] = {};
      }
      this.setting = _OS.setting.applications[this.name];
    }

    BaseApplication.prototype.init = function() {
      var me, path;
      me = this;
      this.subscribe("appregistry", function(m) {
        if (m.name === me.name) {
          return me.applySetting(m.data.m);
        }
      });
      this.on("focus", function() {
        me.sysdock.set("selectedApp", me);
        me.appmenu.pid = me.pid;
        me.appmenu.set("items", me.baseMenu() || []);
        me.appmenu.set("onmenuselect", function(d) {
          return me.trigger("menuselect", d);
        });
        if (me.dialog) {
          return me.dialog.show();
        }
      });
      this.on("hide", function() {
        me.sysdock.set("selectedApp", null);
        me.appmenu.set("items", []);
        if (me.dialog) {
          return me.dialog.hide();
        }
      });
      this.on("menuselect", function(d) {
        switch (d.e.item.data.dataid) {
          case me.name + "-about":
            return me.openDialog("AboutDialog", function() {});
          case me.name + "-exit":
            return me.trigger("exit");
        }
      });
      path = (this.meta().path) + "/scheme.html";
      return this.render(path);
    };

    BaseApplication.prototype.applySetting = function(k) {};

    BaseApplication.prototype.registry = function(k, v) {
      this.setting[k] = v;
      return this.publish("appregistry", k);
    };

    BaseApplication.prototype.show = function() {
      return this.trigger("focus");
    };

    BaseApplication.prototype.blur = function() {
      if (this.appmenu && this.pid === this.appmenu.pid) {
        this.appmenu.set("items", []);
      }
      return this.trigger("blur");
    };

    BaseApplication.prototype.hide = function() {
      return this.trigger("hide");
    };

    BaseApplication.prototype.toggle = function() {
      return this.trigger("toggle");
    };

    BaseApplication.prototype.onexit = function(evt) {
      this.cleanup(evt);
      if (!evt.prevent) {
        if (this.pid === this.appmenu.pid) {
          this.appmenu.set("items", []);
        }
        return ($(this.scheme)).remove();
      }
    };

    BaseApplication.prototype.meta = function() {
      return _OS.APP[this.name].meta;
    };

    BaseApplication.prototype.baseMenu = function() {
      var mn;
      mn = [
        {
          text: _OS.APP[this.name].meta.name,
          child: [
            {
              text: "About",
              dataid: this.name + "-about"
            }, {
              text: "Exit",
              dataid: this.name + "-exit"
            }
          ]
        }
      ];
      mn = mn.concat(this.menu() || []);
      return mn;
    };

    BaseApplication.prototype.main = function() {};

    BaseApplication.prototype.menu = function() {
      return [];
    };

    BaseApplication.prototype.open = function() {};

    BaseApplication.prototype.data = function() {};

    BaseApplication.prototype.update = function() {};

    BaseApplication.prototype.cleanup = function(e) {};

    return BaseApplication;

  })(this.OS.GUI.BaseModel);

  BaseApplication.type = 1;

  this.OS.GUI.BaseApplication = BaseApplication;

  BaseService = (function(superClass) {
    extend(BaseService, superClass);

    function BaseService(name, args) {
      BaseService.__super__.constructor.call(this, name, args);
      this.icon = void 0;
      this.iconclass = "fa-paper-plane-o";
      this.text = "";
      this.timer = void 0;
      this.holder = void 0;
    }

    BaseService.prototype.init = function() {};

    BaseService.prototype.meta = function() {
      return _OS.APP[this.name].meta;
    };

    BaseService.prototype.attach = function(h) {
      return this.holder = h;
    };

    BaseService.prototype.update = function() {
      if (this.holder) {
        return this.holder.update();
      }
    };

    BaseService.prototype.watch = function(t, f) {
      var func, me;
      me = this;
      func = function() {
        f();
        return me.timer = setTimeout((function() {
          return func();
        }), t);
      };
      return func();
    };

    BaseService.prototype.onexit = function(evt) {
      if (this.timer) {
        console.log("clean timer");
      }
      if (this.timer) {
        clearTimeout(this.timer);
      }
      this.cleanup(evt);
      if (this.scheme) {
        return ($(this.scheme)).remove();
      }
    };

    BaseService.prototype.main = function() {};

    BaseService.prototype.show = function() {};

    BaseService.prototype.awake = function(e) {};

    BaseService.prototype.cleanup = function(evt) {};

    return BaseService;

  })(this.OS.GUI.BaseModel);

  BaseService.type = 2;

  BaseService.singleton = true;

  this.OS.GUI.BaseService = BaseService;

  BaseEvent = (function() {
    function BaseEvent(name1) {
      this.name = name1;
      this.prevent = false;
    }

    BaseEvent.prototype.preventDefault = function() {
      return this.prevent = true;
    };

    return BaseEvent;

  })();

  this.OS.GUI.BaseEvent = BaseEvent;

  SubWindow = (function(superClass) {
    extend(SubWindow, superClass);

    function SubWindow(name) {
      SubWindow.__super__.constructor.call(this, name, null);
      this.parent = void 0;
      this.modal = false;
    }

    SubWindow.prototype.quit = function() {
      var evt;
      evt = new _GUI.BaseEvent("exit");
      this.onexit(evt);
      if (!evt.prevent) {
        delete this.observable;
        if (this.scheme) {
          ($(this.scheme)).remove();
        }
        if (this.dialog) {
          return this.dialog.quit();
        }
      }
    };

    SubWindow.prototype.init = function() {};

    SubWindow.prototype.main = function() {};

    SubWindow.prototype.meta = function() {
      return this.parent.meta();
    };

    SubWindow.prototype.show = function() {
      this.trigger('focus');
      return ($(this.scheme)).css("z-index", window._zindex + 2);
    };

    SubWindow.prototype.hide = function() {
      return this.trigger('hide');
    };

    return SubWindow;

  })(this.OS.GUI.BaseModel);

  SubWindow.type = 3;

  this.OS.GUI.SubWindow = SubWindow;

  BaseDialog = (function(superClass) {
    extend(BaseDialog, superClass);

    function BaseDialog(name) {
      BaseDialog.__super__.constructor.call(this, name);
      this.handler = void 0;
    }

    BaseDialog.prototype.onexit = function(e) {
      if (this.parent) {
        return this.parent.dialog = void 0;
      }
    };

    return BaseDialog;

  })(SubWindow);

  this.OS.GUI.BaseDialog = BaseDialog;


  /*
      this dialog rende a tag as main content
      and a list of buttons, the behaviour of
      the button is specified by user. The conf
      object is in the follow form
      {
          tag: <tag_name>,
          buttons:[
              {
                  label: 'buton label',
                  onclick: function(d){...}
              }, ...
          ]
      }
   */

  BasicDialog = (function(superClass) {
    extend(BasicDialog, superClass);

    function BasicDialog(name, conf1, title1) {
      this.conf = conf1;
      this.title = title1;
      BasicDialog.__super__.constructor.call(this, name);
    }

    BasicDialog.prototype.init = function() {
      var html, k, ref, ref1, v;
      if (!this.title) {
        this.title = this.name;
      }
      html = "<afx-app-window  data-id = 'dia-window' apptitle='" + this.title + "' width='" + this.conf.width + "' height='" + this.conf.height + "'> <afx-vbox>";
      ref = this.conf.tags;
      for (k in ref) {
        v = ref[k];
        html += "<" + v.tag + " " + v.att + " data-id = 'content" + k + "'></" + v.tag + ">";
      }
      html += "<div data-height = '35' style=' text-align:right;padding-top:3px;'>";
      ref1 = this.conf.buttons;
      for (k in ref1) {
        v = ref1[k];
        html += "<afx-button data-id = 'bt" + k + "' text = '" + v.label + "' style='margin-right:5px;'></afx-button>";
      }
      html += "</div></afx-vbox></afx-app-window>";
      return _GUI.htmlToScheme(html, this, this.host);
    };

    BasicDialog.prototype.main = function() {
      var f, k, me, ref, v;
      this.scheme.set("minimizable", false);
      if (this.conf.resizable !== void 0) {
        this.scheme.set("resizable", this.conf.resizable);
      }
      me = this;
      f = function(_v) {
        return function() {
          return _v.onclick(me);
        };
      };
      ref = this.conf.buttons;
      for (k in ref) {
        v = ref[k];
        (me.find("bt" + k)).set("onbtclick", f(v));
      }
      if (this.conf.filldata) {
        this.conf.filldata(this);
      }
      if (this.conf.xtra) {
        return this.conf.xtra(this);
      }
    };

    return BasicDialog;

  })(BaseDialog);

  this.OS.GUI.BasicDialog = BasicDialog;

  PromptDialog = (function(superClass) {
    extend(PromptDialog, superClass);

    function PromptDialog() {
      PromptDialog.__super__.constructor.call(this, "PromptDialog", {
        tags: [
          {
            tag: "afx-label",
            att: "data-height = '20'"
          }, {
            tag: "input",
            att: "type = 'text'"
          }
        ],
        width: 200,
        height: 100,
        resizable: false,
        buttons: [
          {
            label: "0k",
            onclick: function(d) {
              var txt;
              txt = (d.find("content1")).value;
              if (txt === "") {
                return d.quit();
              }
              if (d.handler) {
                d.handler(txt);
              }
              return d.quit();
            }
          }, {
            label: "Cancel",
            onclick: function(d) {
              return d.quit();
            }
          }
        ],
        filldata: function(d) {
          if (!d.data) {
            return;
          }
          (d.find("content0")).set("text", d.data.label);
          if (d.data.value) {
            return (d.find("content1")).value = d.data.value;
          }
        },
        xtra: function(d) {
          return $(d.find("content0")).keyup(function(e) {
            if (e.which === 13) {
              return (d.find("bt0")).trigger();
            }
          });
        }
      });
    }

    return PromptDialog;

  })(BasicDialog);

  this.OS.register("PromptDialog", PromptDialog);

  CalendarDialog = (function(superClass) {
    extend(CalendarDialog, superClass);

    function CalendarDialog() {
      CalendarDialog.__super__.constructor.call(this, "CalendarDialog", {
        tags: [
          {
            tag: 'afx-calendar-view'
          }
        ],
        width: 300,
        height: 220,
        resizable: false,
        buttons: [
          {
            label: 'Ok',
            onclick: function(d) {
              var date;
              date = (d.find("content0")).get("selectedDate");
              if (date) {
                if (d.handler) {
                  d.handler(date);
                }
                return d.quit();
              } else {
                return d.notify("Please select a date");
              }
            }
          }, {
            label: 'Cancel',
            onclick: function(d) {
              return d.quit();
            }
          }
        ]
      });
    }

    return CalendarDialog;

  })(BasicDialog);

  this.OS.register("CalendarDialog", CalendarDialog);

  ColorPickerDialog = (function(superClass) {
    extend(ColorPickerDialog, superClass);

    function ColorPickerDialog() {
      ColorPickerDialog.__super__.constructor.call(this, "ColorPickerDialog", {
        tags: [
          {
            tag: 'afx-color-picker'
          }
        ],
        width: 313,
        height: 220,
        resizable: false,
        buttons: [
          {
            label: 'Ok',
            onclick: function(d) {
              var c;
              c = (d.find("content0")).get("selectedColor");
              if (c) {
                if (d.handler) {
                  d.handler(c);
                }
                return d.quit();
              } else {
                return d.notify("Please select a color");
              }
            }
          }, {
            label: 'Cancel',
            onclick: function(d) {
              return d.quit();
            }
          }
        ]
      });
    }

    return ColorPickerDialog;

  })(BasicDialog);

  this.OS.register("ColorPickerDialog", ColorPickerDialog);

  InfoDialog = (function(superClass) {
    extend(InfoDialog, superClass);

    function InfoDialog() {
      InfoDialog.__super__.constructor.call(this, "InfoDialog", {
        tags: [
          {
            tag: 'afx-grid-view'
          }
        ],
        width: 250,
        height: 300,
        resizable: true,
        buttons: [
          {
            label: 'Cancel',
            onclick: function(d) {
              return d.quit();
            }
          }
        ],
        filldata: function(d) {
          var k, ref, rows, v;
          if (!d.data) {
            return;
          }
          rows = [];
          ref = d.data;
          for (k in ref) {
            v = ref[k];
            rows.push([
              {
                value: k
              }, {
                value: v
              }
            ]);
          }
          return (d.find("content0")).set("rows", rows);
        }
      });
    }

    return InfoDialog;

  })(BasicDialog);

  this.OS.register("InfoDialog", InfoDialog);

  YesNoDialog = (function(superClass) {
    extend(YesNoDialog, superClass);

    function YesNoDialog() {
      YesNoDialog.__super__.constructor.call(this, "YesNoDialog", {
        tags: [
          {
            tag: "afx-label",
            att: "style = 'padding:10px;'"
          }
        ],
        width: 300,
        height: 100,
        resizable: true,
        buttons: [
          {
            label: "Yes",
            onclick: function(d) {
              if (d.handler) {
                d.handler(true);
              }
              return d.quit();
            }
          }, {
            label: "No",
            onclick: function(d) {
              if (d.handler) {
                d.handler(false);
              }
              return d.quit();
            }
          }
        ],
        filldata: function(d) {
          var k, l, ref, results, v;
          if (!d.data) {
            return;
          }
          l = d.find("content0");
          ref = d.data;
          results = [];
          for (k in ref) {
            v = ref[k];
            results.push(l.set(k, v));
          }
          return results;
        }
      });
    }

    return YesNoDialog;

  })(BasicDialog);

  this.OS.register("YesNoDialog", YesNoDialog);

  SelectionDialog = (function(superClass) {
    extend(SelectionDialog, superClass);

    function SelectionDialog() {
      SelectionDialog.__super__.constructor.call(this, "SelectionDialog", {
        tags: [
          {
            tag: "afx-list-view"
          }
        ],
        width: 250,
        height: 300,
        resizable: false,
        buttons: [
          {
            label: "Ok",
            onclick: function(d) {
              var el, it;
              el = d.find("content0");
              it = el.get("selected");
              if (!it) {
                return;
              }
              if (d.handler) {
                d.handler(it);
              }
              return d.quit();
            }
          }, {
            label: "Cancel",
            onclick: function(d) {
              return d.quit();
            }
          }
        ],
        filldata: function(d) {
          if (!d.data) {
            return;
          }
          return (d.find("content0")).set("items", d.data);
        },
        xtra: function(d) {
          return (d.find("content0")).set("onlistdbclick", function(e) {
            return (d.find("bt0")).trigger();
          });
        }
      });
    }

    return SelectionDialog;

  })(BasicDialog);

  this.OS.register("SelectionDialog", SelectionDialog);

  AboutDialog = (function(superClass) {
    extend(AboutDialog, superClass);

    function AboutDialog() {
      AboutDialog.__super__.constructor.call(this, "AboutDialog");
    }

    AboutDialog.prototype.init = function() {
      return this.render("os:///resources/schemes/about.html");
    };

    AboutDialog.prototype.main = function() {
      var k, mt, ref, rows, v;
      mt = this.meta();
      this.scheme.set("apptitle", "About: " + mt.name);
      (this.find("mylabel")).set("*", {
        icon: mt.icon,
        iconclass: mt.iconclass,
        text: mt.name + "(v" + mt.version + ")"
      });
      ($(this.find("mydesc"))).html(mt.description);
      if (!mt.info) {
        return;
      }
      rows = [];
      ref = mt.info;
      for (k in ref) {
        v = ref[k];
        rows.push([
          {
            value: k
          }, {
            value: v
          }
        ]);
      }
      return (this.find("mygrid")).set("rows", rows);
    };

    return AboutDialog;

  })(BaseDialog);

  this.OS.register("AboutDialog", AboutDialog);

  FileDiaLog = (function(superClass) {
    extend(FileDiaLog, superClass);

    function FileDiaLog() {
      FileDiaLog.__super__.constructor.call(this, "FileDiaLog");
    }

    FileDiaLog.prototype.init = function() {
      return this.render("os:///resources/schemes/filedialog.html");
    };

    FileDiaLog.prototype.main = function() {
      var filename, fileview, i, location, me;
      fileview = this.find("fileview");
      location = this.find("location");
      filename = this.find("filename");
      me = this;
      this.scheme.set("apptitle", "" + this.title);
      fileview.set("fetch", function(e, f) {
        if (!e.child) {
          return;
        }
        return e.child.path.asFileHandler().read(function(d) {
          if (d.error) {
            return me.error("Resource not found " + e.child.path);
          }
          return f(d.result);
        });
      });
      location.set("onlistselect", function(e) {
        if (!(e && e.data.path)) {
          return;
        }
        return e.data.path.asFileHandler().read(function(d) {
          if (d.error) {
            return me.error("Resource not found " + e.data.path);
          }
          fileview.set("path", e.data.path);
          return fileview.set("data", d.result);
        });
      });
      location.set("items", (function() {
        var j, len, ref, results;
        ref = this.systemsetting.VFS.mountpoints;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          i = ref[j];
          if (i.type !== "app") {
            results.push(i);
          }
        }
        return results;
      }).call(this));
      if (!location.get("selected")) {
        location.set("selected", 0);
      }
      fileview.set("onfileselect", function(f) {
        if (f.type === "file") {
          return ($(filename)).val(f.filename);
        }
      });
      (this.find("bt-ok")).set("onbtclick", function(e) {
        var d, f;
        f = fileview.get("selectedFile");
        if (!f) {
          return;
        }
        d = f.path;
        if (f.type === "file") {
          d = f.path.asFileHandler().parent();
        }
        if (me.handler) {
          me.handler(d, ($(filename)).val());
        }
        return me.quit();
      });
      (this.find("bt-cancel")).set("onbtclick", function(e) {
        return me.quit();
      });
      if (this.data && this.data.file) {
        return ($(filename)).css("display", "block").val(this.data.file.basename || "Untitled");
      }
    };

    return FileDiaLog;

  })(BaseDialog);

  this.OS.register("FileDiaLog", FileDiaLog);

  _GUI = self.OS.GUI;

  _API = self.OS.API;

  _PM = self.OS.PM;

  _OS = self.OS;

  _courrier = self.OS.courrier;

  this.onload = function() {
    console.log("Booting the os");
    return self.OS.boot();
  };

}).call(this);
