// Generated by CoffeeScript 1.9.3
(function() {
  var Calendar,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Calendar = (function(superClass) {
    extend(Calendar, superClass);

    function Calendar(args) {
      Calendar.__super__.constructor.call(this, "Calendar", args);
      this.text = "";
      this.iconclass = "fa fa-calendar";
    }

    Calendar.prototype.init = function() {
      var me;
      me = this;
      return this.watch(1000, function() {
        var now;
        now = new Date;
        me.text = ((now.getDate()) + "/" + (now.getMonth() + 1) + "/" + (now.getFullYear()) + " ") + ((now.getHours()) + ":" + (now.getMinutes()) + ":" + (now.getSeconds()));
        return me.update();
      });
    };

    Calendar.prototype.awake = function(e) {
      return this.openDialog("CalendarDialog", function(d) {
        return console.log(d);
      }, "Calendar");
    };

    Calendar.prototype.cleanup = function(evt) {
      return console.log("cleanup for quit");
    };

    return Calendar;

  })(this.OS.GUI.BaseService);

  this.OS.register("Calendar", Calendar);

}).call(this);

// Generated by CoffeeScript 1.9.3
(function() {
  var PushNotification,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PushNotification = (function(superClass) {
    extend(PushNotification, superClass);

    function PushNotification(args) {
      PushNotification.__super__.constructor.call(this, "PushNotification", args);
      this.iconclass = "fa fa-bars";
      this.onmenuselect = function(e) {
        return console.log(e);
      };
      this.cb = void 0;
      this.pending = [];
    }

    PushNotification.prototype.init = function() {
      var path;
      this.view = false;
      path = path = (this.meta().path) + "/notifications.html";
      return this.render(path);
    };

    PushNotification.prototype.spin = function(b) {
      if (b && this.iconclass === "fa fa-bars") {
        this.iconclass = "fa fa-spinner fa-spin";
        this.color = "#f90e00";
        return this.update();
      } else if (!b && this.iconclass === "fa fa-spinner fa-spin") {
        this.iconclass = "fa fa-bars";
        this.color = "#414339";
        return this.update();
      }
    };

    PushNotification.prototype.main = function() {
      var me;
      me = this;
      this.mlist = this.find("notifylist");
      this.mfeed = this.find("notifeed");
      this.nzone = this.find("notifyzone");
      this.fzone = this.find("feedzone");
      (this.find("btclear")).set("onbtclick", function(e) {
        return me.mlist.set("items", []);
      });
      this.subscribe("notification", function(o) {
        return me.pushout('INFO', o);
      });
      this.subscribe("fail", function(o) {
        return me.pushout('FAIL', o);
      });
      this.subscribe("error", function(o) {
        return me.pushout('ERROR', o);
      });
      this.subscribe("info", function(o) {
        return me.pushout('INFO', o);
      });
      this.subscribe("VFS", function(o) {
        return me.pushout('INFO', o);
      });
      this.subscribe("loading", function(o) {
        me.pending.push(o.id);
        return me.spin(true);
      });
      this.subscribe("loaded", function(o) {
        var i;
        i = me.pending.indexOf(o.id);
        if (i >= 0) {
          me.pending.splice(i, 1);
        }
        if (me.pending.length === 0) {
          return me.spin(false);
        }
      });
      ($(this.nzone)).css("right", 0).css("top", "-3px").css("height", "").css("bottom", "0").css("z-index", 1000000).hide();
      return ($(this.fzone)).css("bottom", "0").css("height", "").hide();
    };

    PushNotification.prototype.pushout = function(s, o, mfeed) {
      var d;
      d = {
        text: "[" + s + "] " + o.name + " (" + o.id + "): " + o.data.m,
        icon: o.data.icon,
        iconclass: o.data.iconclass,
        closable: true
      };
      console.log(o.data.s);
      console.log(o.data.e);
      this.mlist.unshift(d, true);
      return this.notifeed(d);
    };

    PushNotification.prototype.notifeed = function(d) {
      var me, timer;
      me = this;
      this.mfeed.unshift(d, true);
      ($(this.fzone)).show();
      return timer = setTimeout(function() {
        me.mfeed.remove(d, true);
        return clearTimeout(timer);
      }, 3000);
    };

    PushNotification.prototype.awake = function(e) {
      var me;
      if (this.view) {
        ($(this.nzone)).hide();
      } else {
        ($(this.nzone)).show();
      }
      this.view = !this.view;
      me = this;
      if (!this.cb) {
        this.cb = function(e) {
          if (e.originalEvent.item && e.originalEvent.item.i !== void 0) {
            return;
          }
          if (!($(e.target)).closest($(me.nzone)).length && !($(e.target)).closest($(me.holder.root)).length) {
            ($(me.nzone)).hide();
            $(document).unbind("click", me.cb);
            return me.view = !me.view;
          }
        };
      }
      if (this.view) {
        return $(document).on("click", this.cb);
      } else {
        return $(document).unbind("click", this.cb);
      }
    };

    PushNotification.prototype.cleanup = function(evt) {};

    return PushNotification;

  })(this.OS.GUI.BaseService);

  this.OS.register("PushNotification", PushNotification);

}).call(this);

// Generated by CoffeeScript 1.9.3
(function() {
  var Spotlight,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spotlight = (function(superClass) {
    extend(Spotlight, superClass);

    function Spotlight(args) {
      Spotlight.__super__.constructor.call(this, "Spotlight", args);
      this.iconclass = "fa fa-search";
    }

    Spotlight.prototype.init = function() {
      return this.child = [
        {
          text: this.name + " (" + this.pid + "): dummy notif",
          child: [
            {
              text: "submenu"
            }
          ]
        }
      ];
    };

    Spotlight.prototype.main = function() {};

    Spotlight.prototype.awake = function(e) {
      return console.log(this.name, this.pid);
    };

    Spotlight.prototype.cleanup = function(evt) {};

    return Spotlight;

  })(this.OS.GUI.BaseService);

  this.OS.register("Spotlight", Spotlight);

}).call(this);

