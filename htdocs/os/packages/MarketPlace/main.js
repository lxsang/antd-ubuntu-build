// Generated by CoffeeScript 1.9.3
(function() {
  var RepositoryDialog,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  RepositoryDialog = (function(superClass) {
    extend(RepositoryDialog, superClass);

    function RepositoryDialog() {
      RepositoryDialog.__super__.constructor.call(this, "RepositoryDialog");
    }

    RepositoryDialog.prototype.init = function() {
      return this.render((this.meta().path) + "/repositorydia.html");
    };

    RepositoryDialog.prototype.main = function() {
      var ls, me, v;
      me = this;
      this.list = this.find("repo-list");
      ls = (function() {
        var i, len, ref, results;
        ref = this.systemsetting.system.repositories;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          v = ref[i];
          results.push({
            text: v.name,
            iconclass: "fa fa-link",
            url: v.url
          });
        }
        return results;
      }).call(this);
      this.url = this.find("repo-url");
      this.list.set("onlistselect", function(e) {
        return ($(me.url)).html(e.data.url);
      });
      return this.list.set("items", ls);
    };

    return RepositoryDialog;

  })(this.OS.GUI.BaseDialog);

  this.OS.register("RepositoryDialog", RepositoryDialog);

}).call(this);

// Generated by CoffeeScript 1.9.3
(function() {
  var MarketPlace,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  MarketPlace = (function(superClass) {
    extend(MarketPlace, superClass);

    function MarketPlace(args) {
      MarketPlace.__super__.constructor.call(this, "MarketPlace", args);
    }

    MarketPlace.prototype.main = function() {
      var me;
      me = this;
      if (this.systemsetting.system.repositories.length === 0) {
        this.systemsetting.system.repositories.push({
          text: "Antos repository",
          url: "http://127.0.0.1:9191/repo/packages.json",
          name: "Antos repository",
          selected: true
        });
      }
      this.repo = this.find("repo");
      this.repo.set("onlistselect", function(e) {
        if (!e.data) {
          return;
        }
        return me.fetchApps(e.data.url);
      });
      this.repo.set("items", this.systemsetting.system.repositories);
      this.applist = this.find("applist");
      this.applist.set("onlistselect", function(e) {
        if (!e.data) {
          return;
        }
        return me.appDetail(e.data);
      });
      this.container = this.find("container");
      this.appname = this.find("appname");
      this.appdesc = this.find("app-desc");
      this.appdetail = this.find("app-detail");
      this.btinstall = this.find("bt-install");
      this.btremove = this.find("bt-remove");
      this.btexec = this.find("bt-exec");
      ($(this.container)).css("visibility", "hidden");
      this.btexec.set("onbtclick", function(e) {
        var app;
        app = me.applist.get("selected");
        if (!app) {
          return;
        }
        if (app.className) {
          return me._gui.launch(app.className);
        }
      });
      return this.btinstall.set("onbtclick", function(e) {
        return me.openDialog("RepositoryDialog");
      });
    };

    MarketPlace.prototype.fetchApps = function(url) {
      var me;
      me = this;
      return this._api.get(url, function(d) {
        var i, len, v;
        for (i = 0, len = d.length; i < len; i++) {
          v = d[i];
          v.text = v.name;
          v.iconclass = "fa fa-adn";
        }
        return me.applist.set("items", d);
      }, function(e, s) {
        return me.error("Fail to fetch packages list from: " + url);
      });
    };

    MarketPlace.prototype.appDetail = function(d) {
      var k, results, v;
      ($(this.container)).css("visibility", "visible");
      ($(this.appname)).html(d.name);
      if (d.description) {
        ($(this.appdesc)).html(d.description);
      }
      if (this.systemsetting.system.packages[d.className]) {
        ($(this.btinstall)).hide();
        ($(this.btremove)).show();
        ($(this.btexec)).show();
      } else {
        ($(this.btinstall)).show();
        ($(this.btremove)).hide();
        ($(this.btexec)).hide();
      }
      ($(this.appdetail)).empty();
      results = [];
      for (k in d) {
        v = d[k];
        if (k !== "name" && k !== "description") {
          results.push(($(this.appdetail)).append($("<li>").append(($("<span class= 'info-header'>")).html(k)).append($("<span>").html(v))));
        }
      }
      return results;
    };

    return MarketPlace;

  })(this.OS.GUI.BaseApplication);

  this.OS.register("MarketPlace", MarketPlace);

}).call(this);

