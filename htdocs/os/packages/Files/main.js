// Generated by CoffeeScript 1.9.3
(function() {
  var Files,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Files = (function(superClass) {
    extend(Files, superClass);

    function Files(args) {
      Files.__super__.constructor.call(this, "Files", args);
    }

    Files.prototype.main = function() {
      var el, i, j, len, me, mntpoints;
      me = this;
      this.scheme.set("apptitle", "Files manager");
      this.view = this.find("fileview");
      this.navinput = this.find("navinput");
      this.navbar = this.find("nav-bar");
      this.currdir = this.args && this.args.length > 0 ? this.args[0].asFileHandler() : "home:///".asFileHandler();
      this.favo = this.find("favouri");
      this.clipboard = void 0;
      this.apps = [];
      this.view.contextmenuHandler = function(e, m) {
        m.set("items", [me.mnFile(), me.mnEdit()]);
        m.set("onmenuselect", function(evt) {
          if (evt.item.data.app) {
            return me._gui.launch(evt.item.data.app, evt.item.data.args);
          }
        });
        return m.show(e);
      };
      this.view.set("onfileopen", function(e) {
        if (!e) {
          return;
        }
        if (e.type === "dir") {
          return;
        }
        return me._gui.openWith(e);
      });
      this.favo.set("onlistselect", function(e) {
        return me.chdir(e.data.path);
      });
      ($(this.find("btback"))).click(function() {
        var p;
        if (me.currdir.isRoot()) {
          return;
        }
        p = me.currdir.parent();
        me.favo.set("selected", -1);
        return me.chdir(p);
      });
      ($(this.navinput)).keyup(function(e) {
        if (e.keyCode === 13) {
          return me.chdir(($(me.navinput)).val());
        }
      });
      this.view.set("chdir", function(p) {
        return me.chdir(p);
      });
      this.view.set("fetch", function(e, f) {
        if (!e.child) {
          return;
        }
        if (e.child.filename === "[..]") {
          return;
        }
        return e.child.path.asFileHandler().read(function(d) {
          if (d.error) {
            return me.error("Resource not found " + e.child.path);
          }
          return f(d.result);
        });
      });
      this.view.set("onfileselect", function(e) {
        var file, j, len, ref, results, v;
        file = me.view.get("selectedFile");
        if (!file) {
          return;
        }
        if (file.type === "dir") {
          file.mime = "dir";
        }
        me.apps.length = 0;
        ref = me._gui.appsByMime(file.mime);
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          v = ref[j];
          v.args = [file.path];
          results.push(me.apps.push(v));
        }
        return results;
      });
      if (this.setting.sidebar === void 0) {
        this.setting.sidebar = true;
      }
      if (this.setting.nav === void 0) {
        this.setting.nav = true;
      }
      if (this.setting.showhidden === void 0) {
        this.setting.showhidden = false;
      }
      mntpoints = this.systemsetting.VFS.mountpoints;
      for (i = j = 0, len = mntpoints.length; j < len; i = ++j) {
        el = mntpoints[i];
        el.selected = false;
      }
      this.favo.set("items", mntpoints);
      this.applySetting();
      this.subscribe("VFS", function(d) {
        if (d.data.file.hash() === me.currdir.hash() || d.data.file.parent().hash() === me.currdir.hash()) {
          return me.chdir(null);
        }
      });
      return this.chdir(null);
    };

    Files.prototype.applySetting = function(k) {
      if (this.setting.view) {
        this.view.set("view", this.setting.view);
      }
      this.view.set("showhidden", this.setting.showhidden);
      this.toggleSidebar(this.setting.sidebar);
      return this.toggleNav(this.setting.nav);
    };

    Files.prototype.chdir = function(p) {
      var dir, me;
      me = this;
      dir = p ? p.asFileHandler() : me.currdir;
      return dir.read(function(d) {
        if (d.error) {
          return me.error("Resource not found " + p);
          console.log("error");
        }
        me.currdir = dir;
        if (!dir.isRoot()) {
          p = dir.parent().asFileHandler();
          p.filename = "[..]";
          p.type = "dir";
          d.result.unshift(p);
        }
        ($(me.navinput)).val(dir.path);
        me.view.set("path", dir.path);
        return me.view.set("data", d.result);
      });
    };

    Files.prototype.mnFile = function() {
      var arr, me;
      me = this;
      arr = {
        text: "File",
        child: [
          {
            text: "New file",
            dataid: this.name + "-mkf"
          }, {
            text: "New folder",
            dataid: this.name + "-mkdir"
          }, {
            text: "Open with",
            dataid: this.name + "-open",
            child: this.apps
          }, {
            text: "Upload",
            dataid: this.name + "-upload"
          }, {
            text: "Download",
            dataid: this.name + "-download"
          }, {
            text: "Properties",
            dataid: this.name + "-info"
          }
        ],
        onmenuselect: function(e) {
          return me.actionFile(e);
        }
      };
      return arr;
    };

    Files.prototype.mnEdit = function() {
      var me;
      me = this;
      return {
        text: "Edit",
        child: [
          {
            text: "Rename",
            dataid: this.name + "-mv"
          }, {
            text: "Delete",
            dataid: this.name + "-rm"
          }, {
            text: "Cut",
            dataid: this.name + "-cut"
          }, {
            text: "Copy",
            dataid: this.name + "-copy"
          }, {
            text: "Paste",
            dataid: this.name + "-paste"
          }
        ],
        onmenuselect: function(e) {
          return me.actionEdit(e);
        }
      };
    };

    Files.prototype.menu = function() {
      var me, menu;
      me = this;
      menu = [
        this.mnFile(), this.mnEdit(), {
          text: "View",
          child: [
            {
              text: "Refresh",
              dataid: this.name + "-refresh"
            }, {
              text: "Sidebar",
              "switch": true,
              checked: this.setting.sidebar,
              dataid: this.name + "-side"
            }, {
              text: "Navigation bar",
              "switch": true,
              checked: this.setting.nav,
              dataid: this.name + "-nav"
            }, {
              text: "Hidden files",
              "switch": true,
              checked: this.setting.showhidden,
              dataid: this.name + "-hidden"
            }, {
              text: "Type",
              child: [
                {
                  text: "Icon view",
                  radio: true,
                  checked: this.setting.view === 'icon',
                  dataid: this.name + "-icon",
                  type: 'icon'
                }, {
                  text: "List view",
                  radio: true,
                  checked: this.setting.view === 'list' || !this.setting.view,
                  dataid: this.name + "-list",
                  type: 'list'
                }, {
                  text: "Tree view",
                  radio: true,
                  checked: this.setting.view === 'tree',
                  dataid: this.name + "-tree",
                  type: 'tree'
                }
              ],
              onmenuselect: function(e) {
                me.view.set('view', e.item.data.type);
                return me.setting.view = e.item.data.type;
              }
            }
          ],
          onmenuselect: function(e) {
            return me.actionView(e);
          }
        }
      ];
      return menu;
    };

    Files.prototype.toggleSidebar = function(b) {
      if (b) {
        ($(this.favo)).show();
      } else {
        ($(this.favo)).hide();
      }
      return this.trigger("resize");
    };

    Files.prototype.toggleNav = function(b) {
      if (b) {
        ($(this.navbar)).show();
      } else {
        ($(this.navbar)).hide();
      }
      return this.trigger("resize");
    };

    Files.prototype.actionView = function(e) {
      switch (e.item.data.dataid) {
        case this.name + "-hidden":
          return this.registry("showhidden", e.item.data.checked);
        case this.name + "-refresh":
          return this.chdir(null);
        case this.name + "-side":
          return this.registry("sidebar", e.item.data.checked);
        case this.name + "-nav":
          return this.registry("nav", e.item.data.checked);
      }
    };

    Files.prototype.actionEdit = function(e) {
      var file, me;
      me = this;
      file = this.view.get("selectedFile");
      switch (e.item.data.dataid) {
        case this.name + "-mv":
          if (!file) {
            return;
          }
          return this.openDialog("PromptDialog", function(d) {
            if (d === file.filename) {
              return;
            }
            return file.path.asFileHandler().move(me.currdir.path + "/" + d, function(r) {
              if (r.error) {
                return me.error("Fail to rename to " + d + ": " + r.error);
              }
            });
          }, "Rename", {
            label: "File name:",
            value: file.filename
          });
        case this.name + "-rm":
          if (!file) {
            return;
          }
          return this.openDialog("YesNoDialog", function(d) {
            if (!d) {
              return;
            }
            return file.path.asFileHandler().remove(function(r) {
              if (r.error) {
                return me.error("Fail to delete " + file.filename + ": " + r.error);
              }
            });
          }, "Delete", {
            iconclass: "fa fa-question-circle",
            text: "Do you really want to delete: " + file.filename + " ?"
          });
        case this.name + "-cut":
          if (!file) {
            return;
          }
          this.clipboard = {
            cut: true,
            file: file.path.asFileHandler()
          };
          return this.notify("File " + file.filename + " cut");
        case this.name + "-copy":
          if (!file) {
            return;
          }
          this.clipboard = {
            cut: false,
            file: file.path.asFileHandler()
          };
          return this.notify("File " + file.filename + " copied");
        case this.name + "-paste":
          me = this;
          if (!this.clipboard) {
            return;
          }
          if (this.clipboard.cut) {
            return this.clipboard.file.move(me.currdir.path + "/" + this.clipboard.file.basename, function(r) {
              me.clipboard = void 0;
              if (r.error) {
                return me.error("Fail to paste: " + r.error);
              }
            });
          } else {
            this.notify("Copy not yet implemented");
            return this.clipboard = void 0;
          }
          break;
        default:
          return this._api.handler.setting();
      }
    };

    Files.prototype.actionFile = function(e) {
      var file, me;
      me = this;
      file = this.view.get("selectedFile");
      switch (e.item.data.dataid) {
        case this.name + "-mkdir":
          return this.openDialog("PromptDialog", function(d) {
            return me.currdir.mk(d, function(r) {
              if (r.error) {
                return me.error("Fail to create " + d + ": " + r.error);
              }
            });
          }, "New folder", {
            label: "Folder name:"
          });
        case this.name + "-mkf":
          return this.openDialog("PromptDialog", function(d) {
            var fp;
            fp = (me.currdir.path + "/" + d).asFileHandler();
            return fp.write("", function(r) {
              if (r.error) {
                return me.error("Fail to create " + d + ": " + r.error);
              }
            });
          }, "New file", {
            label: "File name:"
          });
        case this.name + "-info":
          if (!file) {
            return;
          }
          return this.openDialog("InfoDialog", null, file.filename, file);
        case this.name + "-upload":
          me = this;
          return this.currdir.upload(function(r) {
            if (r.error) {
              return me.error("Faile to upload to: " + d + ": " + r.error);
            }
          });
        case this.name + "-download":
          if (!file) {
            return;
          }
          return file.path.asFileHandler().download(function() {});
        default:
          return console.log(e);
      }
    };

    return Files;

  })(this.OS.GUI.BaseApplication);

  this.OS.register("Files", Files);

}).call(this);

