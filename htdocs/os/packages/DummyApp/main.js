// Generated by CoffeeScript 1.9.3
(function() {
  var DummyApp, _GUI,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _GUI = this.OS.GUI;

  DummyApp = (function(superClass) {
    extend(DummyApp, superClass);

    function DummyApp(args) {
      DummyApp.__super__.constructor.call(this, "DummyApp", args);
    }

    DummyApp.prototype.main = function() {
      var ldata, list, self, tabdatas, tabs, tdata, tree;
      self = this;
      this.on("btclick", function(e) {
        return self.openDialog("ColorPickerDialog", function(d) {
          return console.log(d);
        });
      });
      this.on("resize", function(w, h) {
        return console.log(self.name + ": resize");
      });
      this.on("treeselect", function(i) {
        return console.log(self.name, i);
      });
      this.on("focus", function() {
        return console.log(self.name, "is focused");
      });
      this.on("dayselect", function(e) {
        return console.log("cellselected", e);
      });
      this.on("gridselect", function(e) {
        return console.log("GRID selected", e);
      });
      tree = this.find("mytree");
      this.scheme.set("apptitle", "Terminal");
      tdata = {
        name: 'My Tree',
        nodes: [
          {
            name: 'hello',
            iconclass: 'fa fa-car'
          }, {
            name: 'wat'
          }, {
            name: 'child folder',
            nodes: [
              {
                name: 'child folder',
                nodes: [
                  {
                    name: 'hello'
                  }, {
                    name: 'wat'
                  }
                ]
              }, {
                name: 'hello'
              }, {
                name: 'wat'
              }, {
                name: 'child folder',
                nodes: [
                  {
                    name: 'hello'
                  }, {
                    name: 'wat'
                  }
                ]
              }
            ]
          }
        ]
      };
      tree.set("data", tdata);
      list = this.find("mylist");
      ldata = [
        {
          text: "some thing with avery long text"
        }, {
          text: "some thing"
        }, {
          text: "some thing"
        }, {
          text: "some thing"
        }, {
          text: "some thing"
        }, {
          text: "some thing"
        }, {
          text: "some thing",
          complex: true,
          detail: [
            {
              text: "Inner content",
              "class": ""
            }
          ]
        }, {
          text: "some thing"
        }, {
          text: "some thing"
        }, {
          text: "some thing"
        }, {
          text: "some thing"
        }, {
          text: "some thing"
        }, {
          text: "some thing"
        }, {
          text: "some thing"
        }, {
          text: "some thing"
        }, {
          text: "some thing"
        }, {
          text: "some thing"
        }, {
          text: "some thing"
        }, {
          text: "some thing"
        }, {
          text: "some thing"
        }, {
          text: "some thing"
        }, {
          text: "some thing"
        }, {
          text: "some thing"
        }
      ];
      list.set("items", ldata);
      list.set("onlistselect", function(e) {
        return console.log(e);
      });
      tabs = this.find("mytabs");
      tabdatas = [
        {
          text: "file1.txt"
        }, {
          text: "file2.cpp"
        }
      ];
      tabs.set("items", tabdatas);
      this.scheme.set("apptitle", "AntOS feature showcase");
      return this.scheme.contextmenuHandler = function(e, m) {
        var mdata;
        mdata = [
          {
            text: " Child 1"
          }, {
            text: "child2",
            child: [
              {
                text: "sub child",
                child: [
                  {
                    text: "sub sub child"
                  }
                ]
              }, {
                text: "sub child 1"
              }
            ],
            onmenuselect: function(e) {
              return console.log(e);
            }
          }
        ];
        m.set("items", mdata);
        return m.show(e);
      };
    };

    return DummyApp;

  })(this.OS.GUI.BaseApplication);

  DummyApp.singleton = false;

  this.OS.register("DummyApp", DummyApp);

}).call(this);

