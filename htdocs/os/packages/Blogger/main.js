// Generated by CoffeeScript 1.9.3
(function() {
  var Blogger,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Blogger = (function(superClass) {
    extend(Blogger, superClass);

    function Blogger(args) {
      Blogger.__super__.constructor.call(this, "Blogger", args);
    }

    Blogger.prototype.main = function() {
      var me;
      me = this;
      this.tabbar = this.find("tabbar");
      this.containers = [this.find("user-container"), this.find("cv-container"), this.find("blog-container")];
      this.user = {};
      this.cvlist = this.find("cv-list");
      this.bloglist = this.find("blog-list");
      this.tabbar.set("onlistselect", function(e) {
        var el, i, len, ref;
        ref = me.containers;
        for (i = 0, len = ref.length; i < len; i++) {
          el = ref[i];
          ($(el)).hide();
        }
        me.fetchData(e.idx);
        return ($(me.containers[e.idx])).show();
      });
      this.tabbar.set("items", [
        {
          iconclass: "fa fa-user-circle",
          selected: true
        }, {
          iconclass: "fa fa-info-circle"
        }, {
          iconclass: "fa fa-book"
        }
      ]);
      return (this.find("bt-user-save")).set("onbtclick", function(e) {
        return me.saveUser();
      });
    };

    Blogger.prototype.fetchData = function(idx) {
      var db, me;
      me = this;
      switch (idx) {
        case 0:
          db = new this._api.DB("user");
          return db.get(null, function(d) {
            var i, inputs, len, results, v;
            if (d.error) {
              return me.error("Cannot fetch user data");
            }
            me.user = d.result[0];
            inputs = me.select("[imput-class='user-input']");
            results = [];
            for (i = 0, len = inputs.length; i < len; i++) {
              v = inputs[i];
              results.push(($(v)).val(me.user[v.name]));
            }
            return results;
          });
        default:
          return console.log("Not implemented yet");
      }
    };

    Blogger.prototype.saveUser = function() {
      var db, i, inputs, len, me, v;
      me = this;
      inputs = this.select("[imput-class='user-input']");
      for (i = 0, len = inputs.length; i < len; i++) {
        v = inputs[i];
        this.user[v.name] = ($(v)).val();
      }
      if (!this.user.fullname || this.user.fullname === "") {
        return this.notify("Full name must be entered");
      }
      db = new this._api.DB("user");
      console.log(this.user);
      return db.save(this.user, function(r) {
        if (r.error) {
          return me.error("Cannot save user data");
        }
        return me.notify("User data updated");
      });
    };

    return Blogger;

  })(this.OS.GUI.BaseApplication);

  Blogger.singleton = true;

  this.OS.register("Blogger", Blogger);

}).call(this);

