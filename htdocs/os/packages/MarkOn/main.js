// Generated by CoffeeScript 1.9.3
(function() {
  var MarkOn,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  MarkOn = (function(superClass) {
    extend(MarkOn, superClass);

    function MarkOn(args) {
      MarkOn.__super__.constructor.call(this, "MarkOn", args);
    }

    MarkOn.prototype.main = function() {
      var markarea, me;
      me = this;
      markarea = this.find("markarea");
      this.container = this.find("mycontainer");
      this.previewOn = false;
      this.currfile = this.args && this.args.length > 0 ? this.args[0].asFileHandler() : "Untitled".asFileHandler();
      this.editormux = false;
      this.editor = new SimpleMDE({
        element: markarea,
        autofocus: true,
        tabSize: 4,
        indentWithTabs: true,
        toolbar: [
          "bold", "italic", "heading", "|", "quote", "code", "unordered-list", "ordered-list", "|", "link", "image", "table", "horizontal-rule", "|", {
            name: "preview",
            className: "fa fa-eye no-disable",
            action: function(e) {
              me.previewOn = !me.previewOn;
              return SimpleMDE.togglePreview(e);
            }
          }
        ]
      });
      this.editor.codemirror.on("change", function() {
        if (me.editormux) {
          return;
        }
        if (me.currfile.dirty === false) {
          me.currfile.dirty = true;
          return me.scheme.set("apptitle", me.currfile.basename + "*");
        }
      });
      this.on("hboxchange", function(e) {
        return me.resizeContent();
      });
      this.bindKey("ALT-N", function() {
        return me.actionFile(me.name + "-New");
      });
      this.bindKey("ALT-O", function() {
        return me.actionFile(me.name + "-Open");
      });
      this.bindKey("CTRL-S", function() {
        return me.actionFile(me.name + "-Save");
      });
      this.bindKey("ALT-W", function() {
        return me.actionFile(me.name + "-Saveas");
      });
      this.resizeContent();
      return this.open(this.currfile);
    };

    MarkOn.prototype.resizeContent = function() {
      var cheight, children, statusbar, titlebar, toolbar;
      children = ($(this.container)).children();
      titlebar = (($(this.scheme)).find(".afx-window-top"))[0];
      toolbar = children[1];
      statusbar = children[4];
      cheight = ($(this.scheme)).height() - ($(titlebar)).height() - ($(toolbar)).height() - ($(statusbar)).height() - 40;
      return ($(children[2])).css("height", cheight + "px");
    };

    MarkOn.prototype.open = function(file) {
      var me;
      if (file.path === "Untitled") {
        return;
      }
      me = this;
      file.dirty = false;
      return file.read(function(d) {
        me.editormux = true;
        me.editor.value(d);
        me.scheme.set("apptitle", "" + me.currfile.basename);
        return me.editormux = false;
      });
    };

    MarkOn.prototype.save = function(file) {
      var me;
      me = this;
      return file.write(file.getb64("text/plain"), function(d) {
        if (d.error) {
          return me.error("Error saving file " + file.basename);
        }
        file.dirty = false;
        file.text = file.basename;
        return me.scheme.set("apptitle", "" + me.currfile.basename);
      });
    };

    MarkOn.prototype.menu = function() {
      var me, menu;
      me = this;
      menu = [
        {
          text: "File",
          child: [
            {
              text: "Open",
              dataid: this.name + "-New",
              shortcut: "A-N"
            }, {
              text: "Open",
              dataid: this.name + "-Open",
              shortcut: "A-O"
            }, {
              text: "Save",
              dataid: this.name + "-Save",
              shortcut: "C-S"
            }, {
              text: "Save as",
              dataid: this.name + "-Saveas",
              shortcut: "A-W"
            }
          ],
          onmenuselect: function(e) {
            return me.actionFile(e.item.data.dataid);
          }
        }
      ];
      return menu;
    };

    MarkOn.prototype.actionFile = function(e) {
      var me, saveas;
      me = this;
      saveas = function() {
        return me.openDialog("FileDiaLog", function(d, n) {
          me.currfile.setPath(d + "/" + n);
          return me.save(me.currfile);
        }, "Save as", {
          file: me.currfile
        });
      };
      switch (e) {
        case this.name + "-Open":
          return this.openDialog("FileDiaLog", function(d, f) {
            return me.open((d + "/" + f).asFileHandler());
          }, "Open file");
        case this.name + "-Save":
          this.currfile.cache = this.editor.value();
          if (this.currfile.basename) {
            return this.save(this.currfile);
          }
          return saveas();
        case this.name + "-Saveas":
          this.currfile.cache = this.editor.value();
          return saveas();
        case this.name + "-New":
          this.currfile = "Untitled".asFileHandler();
          this.currfile.cache = "";
          return this.editor.value("");
      }
    };

    MarkOn.prototype.cleanup = function(evt) {
      var me;
      if (!this.currfile.dirty) {
        return;
      }
      me = this;
      evt.preventDefault();
      return this.openDialog("YesNoDialog", function(d) {
        if (d) {
          me.currfile.dirty = false;
          return me.quit();
        }
      }, "Quit", {
        text: "Quit without saving ?"
      });
    };

    return MarkOn;

  })(this.OS.GUI.BaseApplication);

  MarkOn.dependencies = ["mde/simplemde.min"];

  this.OS.register("MarkOn", MarkOn);

}).call(this);

