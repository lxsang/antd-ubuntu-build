// Generated by CoffeeScript 1.9.3
(function() {
  var ActivityMonitor, _APP, _PM,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _PM = this.OS.PM;

  _APP = this.OS.APP;

  ActivityMonitor = (function(superClass) {
    extend(ActivityMonitor, superClass);

    function ActivityMonitor(args) {
      ActivityMonitor.__super__.constructor.call(this, "ActivityMonitor", args);
    }

    ActivityMonitor.prototype.main = function() {
      var header, me;
      me = this;
      this.scheme.set("apptitle", "Activity Monitor");
      this.grid = this.find("mygrid");
      this.on("btclick", function(e) {
        var app, item;
        if (e.id !== "btkill") {
          return;
        }
        item = me.grid.get("selected");
        if (!item) {
          return;
        }
        app = _PM.appByPid(item[0].value);
        if (app) {
          return app.quit();
        }
      });
      header = [
        {
          width: 50,
          value: "Pid"
        }, {
          value: "Name"
        }, {
          value: "Type",
          width: 80
        }, {
          width: 75,
          value: "Alive (ms)"
        }
      ];
      this.gdata = {
        processes: {},
        alive: []
      };
      this.grid.set("header", header);
      return this.monitor();
    };

    ActivityMonitor.prototype.monitor = function() {
      var me, now;
      me = this;
      me.gdata.alive = [];
      now = (new Date).getTime();
      $.each(_PM.processes, function(i, d) {
        return $.each(d, function(j, a) {
          if (me.gdata.processes[a.pid]) {
            me.gdata.processes[a.pid][3].value = now - a.birth;
          } else {
            me.gdata.processes[a.pid] = [
              {
                value: a.pid
              }, {
                icon: _APP[a.name].type === 1 ? _APP[a.name].meta.icon : a.icon,
                iconclass: _APP[a.name].type === 1 ? _APP[a.name].meta.iconclass : a.iconclass,
                value: a.name
              }, {
                value: _APP[a.name].type === 1 ? "Application" : "Service"
              }, {
                value: now - a.birth
              }
            ];
          }
          return me.gdata.alive.push(a.pid);
        });
      });
      this.refreshGrid();
      return this.timer = setTimeout((function() {
        return me.monitor();
      }), 500);
    };

    ActivityMonitor.prototype.refreshGrid = function() {
      var activeList, me;
      activeList = [];
      me = this;
      $.each(this.gdata.processes, function(i, e) {
        if (($.inArray(Number(i), me.gdata.alive)) >= 0) {
          return activeList.push(e);
        } else {
          return me.gdata.processes[i] = void 0;
        }
      });
      return this.grid.set("rows", activeList);
    };

    ActivityMonitor.prototype.cleanup = function(e) {
      if (this.timer) {
        return clearTimeout(this.timer);
      }
    };

    return ActivityMonitor;

  })(this.OS.GUI.BaseApplication);

  ActivityMonitor.singleton = true;

  this.OS.register("ActivityMonitor", ActivityMonitor);

}).call(this);

